import { Box, Typography } from '@mui/material';
import { PageProps } from '../PageProps';

const RequestIds: React.FC<PageProps> = ({ darkMode }) => {
  return (
    <Box sx={{ fontFamily: 'Montserrat, sans-serif', padding: 4, maxWidth: 1200, margin: '0 auto' }}>
      <Box sx={{ textAlign: 'center', mb: 4 }}>
        <Typography variant="h2" sx={{ fontWeight: 500, color: darkMode ? "#03a9f4" : "#009af4", display: 'flex', alignItems: 'center', justifyContent: 'center', gap: 2 }}>
          Request IDs API
        </Typography>
        <Typography variant="h5" sx={{ fontWeight: 400, color: darkMode ? "#e0e0e0" : "#333" }}>
          The OceanOPS API for requesting Identifiers.
        </Typography>
      </Box>

      <Box sx={{ mb: 6 }}>
        <Typography variant="h4" sx={{ fontWeight: 500, color: darkMode ? "#03a9f4" : "#0056b3", textAlign: 'center', mb: 2 }}>
          Introduction
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          Networks can programmatically register new platforms via an OceanOPS API endpoint.
          This guide provides details on:
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          <strong>What you need to submit:</strong> check you can provide all the required fields for your platforms.
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center' }}>
          <strong>How to submit it:</strong> technical process of acquiring a API token and sending request.
        </Typography>
      </Box>

      <Box sx={{ mb: 6 }}>
        <Typography variant="h4" sx={{ fontWeight: 500, color: darkMode ? "#03a9f4" : "#0056b3", textAlign: 'center', mb: 2 }}>
          What to Submit?
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          This API Request ID only allows submission of a few fields, and if it is a new registration it will create a new record in the database and return a new unique identifier.
          The remaining metadata for the platform, including the metadata fields not covered by this API endpoint, can then be updated via the Online User Forms, the File Uploader dashboard module,
          and in the future by a full API endpoint that covers all metadata fields.
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          To request a unique OceanOPS ID for a planned platform, thus creating a draft platform in our system with a "Probable" status, only a small list of fields are required:
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/apiIDfields.png" alt="API ID Fields" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          Please view the details of these fields directly in the swagger request documentation here:
          <a href="https://www.ocean-ops.org/api/swagger/?url=https://www.ocean-ops.org/apiid/app/oceanops-apiid.yaml" target="_blank" style={{ color: darkMode ? "#03a9f4" : "#0056b3", textDecoration: 'none' }}>
            Request ID API Swagger
          </a>
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          Only <strong>program</strong> and <strong>startDate</strong> are absolutely mandatory.
          However, the other fields, if available, are important for OceanOPS efficient coordination and monitoring.
          And equally important, the <strong>internalId</strong> field is particularly useful for users/networks to match their existing internal unique ID of their record (if they have one) with the OceanOPS unique ID and OceanOPS record that will be generated by the request.
        </Typography>
      </Box>

      <Box sx={{ mb: 6 }}>
        <Typography variant="h4" sx={{ fontWeight: 500, color: darkMode ? "#03a9f4" : "#0056b3", textAlign: 'center', mb: 2 }}>
          How to Submit?
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          Batches of identifiers can be requested through the underlying REST API, documented here:
          <a href="https://www.ocean-ops.org/api/swagger/?url=https://www.ocean-ops.org/apiid/app/oceanops-apiid.yaml" target="_blank" style={{ color: darkMode ? "#03a9f4" : "#0056b3", textDecoration: 'none' }}>
            Request ID API Swagger
          </a>
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          This API requires a couple of id-token to authenticate the user while using it.
          These identifying information can be obtained following the instructions.
        </Typography>
        <Typography variant="h5" sx={{ fontWeight: 500, color: darkMode ? "#03a9f4" : "#0056b3", textAlign: 'center', mb: 2 }}>
          Obtain an API token
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          It is possible to request an API token once logged in on the <a target="_blank" href="https://www.ocean-ops.org/board" style={{ color: darkMode ? "#03a9f4" : "#0056b3", textDecoration: 'none' }}>OceanOPS web dashboard</a>, under the API access window in the user menu:
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/getAPIToken1.png" alt="Get API Token 1" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          A new window will appear, allowing to request a token:
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/getAPIToken2.png" alt="Get API Token 2" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          When clicking 'Request token', the interface will display the request token.
        </Typography>
        <Box sx={{ backgroundColor: darkMode ? '#664d03' : '#fff3cd', padding: 2, borderRadius: 2, mb: 2 }}>
          <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#664d03", textAlign: 'center' }}>
            Attention: the newly created token will be displayed only once for security reasons. Be sure to securely save it for future usage.
          </Typography>
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          A token has an end validity date, defaulting to one year. If you need to extend the validity of a token, please request a new one (requires updating scripts/codes where it is used) or reach out to OceanOPS support. Only one token per user can be activated at a time.
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/getAPIToken3.png" alt="Get API Token 3" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          <i>This token has obviously been disabled since!</i>
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          You can view your active token IDs, validity and usage information, usage instruction by visiting this API access window later:
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/getAPIToken4.png" alt="Get API Token 4" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          This window also enables you to disable a token, allowing you request a new one if needed (e.g., expired or forgotten).
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/getAPIToken5.png" alt="Get API Token 5" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="h5" sx={{ fontWeight: 500, color: darkMode ? "#03a9f4" : "#0056b3", textAlign: 'center', mb: 2 }}>
          Send request using token
        </Typography>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          Once the API token is obtained it can be used to make requests directly via the Swagger GUI (Authorize button).
          And it can, of course, be used in a program to routinely make requests, or in a different GUI such as Postman.
          Multiple platforms IDs can be requested in a single POST request:
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/apiRequestExample.png" alt="API Request Example" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          The response JSON array will in this case include an object for each requested ID, including the original input fields sent by the user:
        </Typography>
        <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
          <img src="/docs/img/apiResponseExample.png" alt="API Response Example" style={{ maxWidth: '100%', height: 'auto' }} />
        </Box>
        <Typography variant="body1" sx={{ color: darkMode ? "#e0e0e0" : "#333", textAlign: 'center', mb: 2 }}>
          Here we see the user didn't include an <strong>internalId</strong> value in their input. If they had done, they would have easily been able to identify their existing record in their database using the <strong>input.internalId</strong> value in this response, and update it with the corresponding new <strong>gtsId</strong> value that has just been generated.
        </Typography>
      </Box>
    </Box>
  );
};

export default RequestIds;